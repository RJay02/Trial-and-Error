/* Importing the required Google fonts  */
@import url('https://fonts.googleapis.com/css2?family=Josefin+Sans:ital,wght@0,100..700;1,100..700&family=Protest+Guerrilla&display=swap');

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

/* I have not specified any padding or margin values in the body itself because some parts of the website 
do not require any padding or margin. Although specifying values for padding and margin in the body is 
generally a good practice, I found it easier to only specify values where they are actually needed to help
me achieve a closer pixel-perfect look as shown in the wireframes provided */
body{
    font-family: 'Josefin Sans', sans-serif;
    background-color: #e9e9e9;
    /* Adding adequate letter and word spacing to improve legibility */
    word-spacing: 0.25em;
    letter-spacing: 0.5px;
    /* Setting the font-size dynamically */
    font-size: 1.2em;
}

/* Styling of the header section */
header{
    text-align: center;
    padding: 12px;
    /* I have set the max-width to 820px to ensure that the nav items (Our Blog, Our Artists, Our Story) 
    do not overflow the container on larger screens, as seen in the wireframes */
    max-width: 820px;
    /* This centers the element horizontally, with auto adjusting the left and right margins, 
    effectively centering the nav bar on larger screens */
    margin: 0 auto;
}

header img{
    margin: 0 12px 12px; /* No top margin is given to the image since the header itself has padding 
                            of 12px in each direction. Giving a top margin would result in a total 
                            padding/margin of 24px */
    width: 80px;
}

nav ul{
    list-style: none;
    /* Using flexbox instead of grid as it is simpler and sufficient for this layout */
    display: flex;
    justify-content: space-around;
}

nav ul li a{
    color: black;
    text-decoration: none;
}


/* Styling of the main content section */
main{
    border: 1px solid #000;  /* Adding a border around the main content to match the wireframe appearance */
    max-width: 720px; /* Ensuring the main section is the required width as shown in the wireframes */
    margin: 0 auto;
    background-color: white;
}

.introduction h1{
    font-size: 3.6em; /* The heading font size is three times the default font size (1.2em) */
    margin-top: 12px;
}

.introduction h2{
    font-size: 3.6em;
    padding: 0 12px; /* Through out my code I have tried to manipulate with the padding and the margin
                    to make it look as close to the wireframe as possible yet still be aesthetically pleasing 
                    for easier legibility and better looks overall. */
}

.introduction p{
    padding: 12px;
}

/* Styling of the main content section */
.content h2{
    margin-bottom: 12px; /* Adding margin only to the bottom for a cleaner and more legible look,
                            closely matching the wireframe */
    font-size: 3.6em;
}

.content p{
    padding: 12px;
}

/* Album Covers Section */
.album-covers {
    display: grid; /* Using grid layout for album covers, which will be adjusted in media queries 
                    to match the wireframes for larger screens */
    grid-template-columns: 1fr;
    margin-bottom: 12px;
}

.album-covers img {
    width: 100%;
    height: auto;
    border: 1px solid #000; /* I also decided to add a border to all the album images
                                since it looks much better with a border and because I am trying 
                                to achieve the exact look shown in the wireframe */  
}

/* For smaller screen sizes the featured album is hidden */
.album-covers .featured-album{
    display: none;
}

/* Author Section */
.author-info {
    display: grid;
    grid-template-columns: 1fr;
}

.author-info h2{
    margin-bottom: 12px;
    font-size: 3.6em;
}

.author-info p{
    padding: 12px;
}

.author-info img {
    /* Centering the author image both vertically and horizontally */
    justify-self: center;
    align-self: center;
    width: 200px;
    /* Making the author image circular, as shown in the wireframes */
    border-radius: 50%;
    margin-bottom: 12px;
}

/* Footer Section */
footer{
    background-color: #14181d;
    color: white;
    padding: 12px;
    /* Again max-width and margin are used to set the container size the same as in the wireframes */
    max-width: 720px;
    margin: 0 auto;
}

/* Repeated code */
h1, h2{
    font-family: 'Protest Guerrilla', 'sans-serif';
}

/* Grouping repeated text alignment rules to avoid redundancy */
.introduction h1, .introduction h2, .content h2, .author-info h2, footer{
    text-align: center;
}

/* Media Queries for all different screen sizes*/
@media (min-width: 540px){
    /* Following the specifications and declaring the values as per screen sizes */
    header, .introduction p, .content p, .author-info p, footer{
        padding: 20px;
    }

    .introduction h1{
        margin-top: 20px;
    }

    .introduction h2{
        padding: 0 20px;
    }

    header img{
        margin: 0 20px;
    }

    .content h2, .album-covers, .author-info h2, .author-info img{
        margin-bottom: 20px;
    }
}

/* Media query for a tablet screen */
@media (min-width: 720px){
    header, .introduction p, footer{
        padding: 30px;
    }

    header img{
        margin: 0 30px;
    }

    .introduction h1{
        margin-top: 30px;
    }

    .introduction h2{
        padding: 0 30px;
    }

    .content p{
        padding: 0 30px 30px;
    }

    .content h2{
        margin-bottom: 30px;
    }

    .album-covers{
        display: grid;
        /* Here I have used a grid box to create two columns of equal sizes for the album covers, 
        both taking up 50% (1 fractional unit) of the available space */
        grid-template-columns: repeat(2, 1fr);
        margin-bottom: 0px;
    }

    .author-info{
        display: grid;
        /* Doing this allow me to keep the image width at 200px while also allowing the heading and the 
        author paragraph take more space  */
        grid-template-columns: 1fr 200px;
        align-items: center;
        padding: 30px; 
    }

    .author-info h2 {
        margin: 0; /* Removes extra margin for better alignment */
    }
    
    .author-info p {
        margin: 0;
        padding-top: 10px; /* Adding some space between the heading and the paragraph */
    }

    .author-info img{
        width: 200px;
        height: 200px;
        border-radius: 50%;
        grid-column: 2; /* Specifying that author image needs to be placed in the
                        second column of the grid since its different in the wireframe from 
                        a mobile screen size to a tablet screen size*/ 
        grid-row: 1 / span 2; /* Declaring that the image needs to cover 2 row heights to create the image
                                taller than the heading and the paragraph*/ 
    }
}

@media (min-width: 1024px){    
    main{
        max-width: 1024px; /*Setting the max width for the main container to match the desktop wireframe */
    }

    header, footer{
        padding: 50px;
    }

    .introduction h1{
        font-size: 8em; /*Following the specifications and the wireframes increasing the font size of the 
                        introduction paragraph compared to other fonts */ 
        text-align: left;
        padding-left: 50px;
        margin-top: 50px;
    }

    .introduction h2{
        padding-left: 50px;
        text-align: left;
    }

    .introduction p{
        padding-left: 50px;
        max-width: 720px; /* This to make the introduction paragraph look exactly like the wireframes intended */ 
        font-size: 1.4em; /* Following the specifications increasing the font size of the introduction paragraph */  
    }

    header img{
        width: 200px;
        margin: 0 50px 50px 50px;
    }

    .content {
        column-count: 3; /* This is to separate the main content text into 3 three columns, 
                            I decided to use column-count and not flexbox and grid as 
                            using column-count easily helps me achieve the same desired look 
                            as the wireframes and also makes me code more efficient as there are 
                            fewer lines to compile and load as it would of been if I used a grid inside 
                            of a flexbox to achieve this look */ 
        padding-bottom: 50px;
    }

    .content h2{
        padding: 0 50px;
        text-align: left;
    }

    .content p{
        padding: 0 30px 50px 50px;
        text-align: left;
    }

    .album-covers{
        grid-template-columns: repeat(4, 1fr); 
    }

    .album-covers .featured-album{
        display: grid;
        grid-row: 1/ span 2;
        grid-column: 1/ span 2;
    }

    .author-info {
        max-width: 720px;
        margin: 0 auto;
        padding: 50px;
        gap: 50px; /* Adding gap for better spacing between text and image */
    }

    footer{
        max-width: 1024px;
    }
}